//
// Copyright (c) 2021-2025. NICE Ltd. All rights reserved.
//
// Licensed under the NICE License;
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    https://github.com/nice-devone/nice-cxone-mobile-utility/blob/main/LICENSE
//
// TO THE EXTENT PERMITTED BY APPLICABLE LAW, THE CXONE MOBILE SDK IS PROVIDED ON
// AN “AS IS” BASIS. NICE HEREBY DISCLAIMS ALL WARRANTIES AND CONDITIONS, EXPRESS
// OR IMPLIED, INCLUDING (WITHOUT LIMITATION) WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, AND TITLE.
//

import Foundation

/// An add-on protocol to describe a type that must be opened before and closed after usage.
protocol HasOpenAndClose: HasClose, HasOpen {}

extension HasOpenAndClose {
    /// Execute a block of code, guaranteeing that is `open`ed before usage and `close`d afterwards.
    /// - Parameter body: block to be safely executed
    /// - returns value returned by `body` if any.
    /// - throws rethrows any exception generated by `open` or `body`.
    func use<T>(_ body: (Self) throws -> T) throws -> T {
        try open()
        
        defer {
            try? close()
        }
        
        return try body(self)
    }
}

extension InputStream: HasOpenAndClose {}
extension OutputStream: HasOpenAndClose {}
